name: Deploy to Production

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  IMAGE_NAME: kazakhstan-strategy-app
  CONTAINER_NAME: kazakhstan-strategy
  PORT: 8080

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        env:
          DOCKER_BUILDKIT: 1
        run: |
          IMAGE_TAG="${{ env.IMAGE_NAME }}:$(date +%Y%m%d-%H%M%S)-${GITHUB_SHA::7}"

          echo "Building image: $IMAGE_TAG"
          docker build -t $IMAGE_TAG -t ${{ env.IMAGE_NAME }}:latest .

          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV

      - name: Run Database Migrations
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          set -e

          echo "Running database migrations..."

          # Run migrations in a temporary container
          docker run --rm \
            -e ConnectionStrings__DefaultConnection="Host=$DB_HOST;Port=$DB_PORT;Database=$DB_NAME;Username=$DB_USER;Password=$DB_PASSWORD" \
            -e ASPNETCORE_ENVIRONMENT=Production \
            -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            -e AWS_REGION="$AWS_REGION" \
            -e AWS_S3_BUCKET="$AWS_S3_BUCKET" \
            ${{ env.IMAGE_TAG }} \
            dotnet ef database update --project /app

          echo "✓ Migrations completed successfully!"

      - name: Blue-Green Deployment
        env:
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
          JWT_ISSUER: ${{ secrets.JWT_ISSUER }}
          JWT_AUDIENCE: ${{ secrets.JWT_AUDIENCE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET }}
        run: |
          set -e

          # Determine container names for blue-green deployment
          CURRENT_CONTAINER=$(docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "{{.Names}}" | head -n 1)

          if [[ "$CURRENT_CONTAINER" == "${{ env.CONTAINER_NAME }}-blue" ]]; then
            NEW_CONTAINER="${{ env.CONTAINER_NAME }}-green"
            OLD_CONTAINER="${{ env.CONTAINER_NAME }}-blue"
          else
            NEW_CONTAINER="${{ env.CONTAINER_NAME }}-blue"
            OLD_CONTAINER="${{ env.CONTAINER_NAME }}-green"
          fi

          echo "Current container: $CURRENT_CONTAINER"
          echo "New container: $NEW_CONTAINER"

          # Start new container
          docker run -d \
            --name $NEW_CONTAINER \
            --restart unless-stopped \
            -p ${{ env.PORT }}:8080 \
            -e DB_HOST="$DB_HOST" \
            -e DB_PORT="$DB_PORT" \
            -e DB_NAME="$DB_NAME" \
            -e DB_USER="$DB_USER" \
            -e DB_PASSWORD="$DB_PASSWORD" \
            -e JWT_KEY="$JWT_KEY" \
            -e JWT_ISSUER="$JWT_ISSUER" \
            -e JWT_AUDIENCE="$JWT_AUDIENCE" \
            -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" \
            -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY" \
            -e AWS_REGION="$AWS_REGION" \
            -e AWS_S3_BUCKET="$AWS_S3_BUCKET" \
            -e ASPNETCORE_ENVIRONMENT=Production \
            -e ASPNETCORE_URLS=http://+:8080 \
            ${{ env.IMAGE_TAG }}

          echo "Started new container: $NEW_CONTAINER"

      - name: Health Check
        run: |
          set -e

          # Determine new container name
          CURRENT_CONTAINER=$(docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "{{.Names}}" | head -n 1)
          if [[ "$CURRENT_CONTAINER" == "${{ env.CONTAINER_NAME }}-blue" ]]; then
            NEW_CONTAINER="${{ env.CONTAINER_NAME }}-green"
          else
            NEW_CONTAINER="${{ env.CONTAINER_NAME }}-blue"
          fi

          echo "Waiting for container to be healthy..."
          sleep 10

          # Health check
          for i in {1..30}; do
            if curl -f http://localhost:${{ env.PORT }}/health 2>/dev/null; then
              echo "✓ Health check passed!"
              exit 0
            fi

            if [ $i -eq 30 ]; then
              echo "✗ Health check failed after 30 attempts"
              docker logs $NEW_CONTAINER
              docker stop $NEW_CONTAINER
              docker rm $NEW_CONTAINER
              exit 1
            fi

            echo "Attempt $i/30 failed, retrying..."
            sleep 2
          done

      - name: Switch Traffic and Cleanup
        if: success()
        run: |
          set -e

          # Determine container names
          CURRENT_CONTAINER=$(docker ps --filter "name=${{ env.CONTAINER_NAME }}" --format "{{.Names}}" | head -n 1)

          if [[ "$CURRENT_CONTAINER" == "${{ env.CONTAINER_NAME }}-blue" ]]; then
            OLD_CONTAINER="${{ env.CONTAINER_NAME }}-green"
          else
            OLD_CONTAINER="${{ env.CONTAINER_NAME }}-blue"
          fi

          # Stop and remove old container
          if [ ! -z "$OLD_CONTAINER" ] && docker ps -a --filter "name=$OLD_CONTAINER" --format "{{.Names}}" | grep -q "$OLD_CONTAINER"; then
            echo "Stopping old container: $OLD_CONTAINER"
            docker stop $OLD_CONTAINER || true
            docker rm $OLD_CONTAINER || true
          fi

          # Clean up old images (keep last 3)
          echo "Cleaning up old images..."
          docker images "${{ env.IMAGE_NAME }}" --format "{{.ID}} {{.CreatedAt}}" | \
            tail -n +4 | \
            awk '{print $1}' | \
            xargs -r docker rmi -f || true

          # Remove dangling images
          docker image prune -f

          echo "✓ Deployment completed successfully!"
          echo "Active containers:"
          docker ps --filter "name=${{ env.CONTAINER_NAME }}"

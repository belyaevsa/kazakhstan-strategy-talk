version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    container_name: kazakhstan-strategy-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-kazakhstan_strategy}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application (Backend + Frontend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kazakhstan-strategy-app
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      # Database Configuration
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${DB_NAME:-kazakhstan_strategy}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-your_secure_password}

      # JWT Configuration
      JWT_KEY: ${JWT_KEY:-GenerateASecureRandomKeyAtLeast32CharactersLongForProduction!}
      JWT_ISSUER: ${JWT_ISSUER:-KazakhstanStrategyApi}
      JWT_AUDIENCE: ${JWT_AUDIENCE:-KazakhstanStrategyClient}

      # Application Settings
      ASPNETCORE_ENVIRONMENT: ${ASPNETCORE_ENVIRONMENT:-Production}
      ASPNETCORE_URLS: http://+:8080
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
    driver: local
